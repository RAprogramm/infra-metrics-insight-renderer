name: Render metrics for RAprogramm profile

on:
  workflow_dispatch:
    inputs:
      branch_name:
        description: "Branch name used for the metrics refresh PR."
        required: false
        default: "ci/metrics-refresh-profile"
  workflow_call:
    inputs:
      branch_name:
        description: "Branch name used for the metrics refresh PR."
        required: false
        default: "ci/metrics-refresh-profile"
        type: string
    secrets:
      CLASSIC:
        required: true

jobs:
  render:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    env:
      TZ: Asia/Ho_Chi_Minh
      BRANCH_NAME: ${{ inputs.branch_name }}
      TARGET_USER: RAprogramm
      TARGET_PATH: metrics/profile.svg
      TEMP_ARTIFACT: profile.tmp.svg

    steps:
      - name: Checkout renderer
        uses: actions/checkout@v5

      - name: Metrics embed
        uses: lowlighter/metrics@v3.34
        with:
          token: ${{ secrets.CLASSIC }}
          user:  ${{ env.TARGET_USER }}
          template: classic
          filename: ${{ env.TEMP_ARTIFACT }}
          base: "header, activity, community, repositories"
          config_timezone: ${{ env.TZ }}
          cache: 12h
          plugin_isocalendar: yes
          plugin_isocalendar_duration: full-year
          plugin_habits: yes
          plugin_habits_charts: true
          plugin_habits_days: 14
          plugin_habits_facts: true
          plugin_habits_from: 200
          plugin_languages: yes
          plugin_languages_sections: most-used
          plugin_languages_details: bytes-size, percentage

      - name: Verify generated artifact
        run: |
          set -eu
          test -f "$GITHUB_WORKSPACE/${TEMP_ARTIFACT}"
          echo "Generated: $GITHUB_WORKSPACE/${TEMP_ARTIFACT}"

      - name: Move artifact into repository workspace
        run: |
          set -euo pipefail
          mkdir -p "$(dirname "${TARGET_PATH}")"
          mv "$GITHUB_WORKSPACE/${TEMP_ARTIFACT}" "${TARGET_PATH}"
          echo "Stored metrics at ${TARGET_PATH}"

      - name: Commit metrics update
        id: update
        run: |
          set -euo pipefail

          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config pull.rebase true

          DEFAULT_REF="$(git symbolic-ref --quiet --short HEAD || true)"
          if [ -z "${DEFAULT_REF}" ]; then
            DEFAULT_REF="main"
          fi

          if git ls-remote --exit-code --heads origin "${BRANCH_NAME}" >/dev/null 2>&1; then
            git fetch --no-tags --prune --depth=1 origin \
              "+refs/heads/${BRANCH_NAME}:refs/remotes/origin/${BRANCH_NAME}"
            git checkout -B "${BRANCH_NAME}" "origin/${BRANCH_NAME}"
          else
            git fetch --no-tags --prune --depth=1 origin \
              "+refs/heads/${DEFAULT_REF}:refs/remotes/origin/${DEFAULT_REF}" || true
            git checkout -B "${BRANCH_NAME}" "origin/${DEFAULT_REF}" || git checkout -B "${BRANCH_NAME}" "${DEFAULT_REF}"
          fi

          UPSTREAM_BEFORE="$(git rev-parse --verify "origin/${BRANCH_NAME}" 2>/dev/null || true)"

          git add "${TARGET_PATH}"

          if git diff --cached --quiet; then
            echo "No changes to commit."
            echo "pushed=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          git commit -m "chore(metrics): refresh profile"

          PUSHED=false
          for ATTEMPT in 1 2 3; do
            if git push origin "${BRANCH_NAME}"; then
              echo "Push attempt ${ATTEMPT} succeeded with fast-forward update."
              PUSHED=true
              echo "pushed=true" >> "$GITHUB_OUTPUT"
              break
            fi

            echo "Fast-forward push attempt ${ATTEMPT} failed, verifying remote state before force push..." >&2

            git fetch --no-tags --prune --depth=1 origin \
              "+refs/heads/${BRANCH_NAME}:refs/remotes/origin/${BRANCH_NAME}" || true

            REMOTE_AFTER="$(git rev-parse --verify "origin/${BRANCH_NAME}" 2>/dev/null || true)"

            if [ -n "${UPSTREAM_BEFORE}" ] && [ "${REMOTE_AFTER}" != "${UPSTREAM_BEFORE}" ]; then
              echo "Remote branch advanced to ${REMOTE_AFTER}; retrying without force push." >&2
              continue
            fi

            if [ -z "${UPSTREAM_BEFORE}" ] && [ -n "${REMOTE_AFTER}" ]; then
              echo "Remote branch ${BRANCH_NAME} appeared at ${REMOTE_AFTER}; retrying without force push." >&2
              continue
            fi

            if [ -n "${UPSTREAM_BEFORE}" ]; then
              FORCE_ARGS=("--force-with-lease=refs/heads/${BRANCH_NAME}:${UPSTREAM_BEFORE}")
            else
              FORCE_ARGS=("--force-with-lease")
            fi

            if git push "${FORCE_ARGS[@]}" origin "${BRANCH_NAME}"; then
              echo "Push attempt ${ATTEMPT} succeeded with force-with-lease."
              PUSHED=true
              echo "pushed=true" >> "$GITHUB_OUTPUT"
              break
            fi

            echo "Force push attempt ${ATTEMPT} failed, refreshing branch and retrying..." >&2
          done

          if [ "${PUSHED}" != true ]; then
            echo "Unable to push metrics update after multiple attempts." >&2
            exit 1
          fi

          DEFAULT_BASE="$(git symbolic-ref --quiet --short refs/remotes/origin/HEAD | sed 's#^origin/##' || true)"
          if [ -z "${DEFAULT_BASE}" ]; then DEFAULT_BASE="${DEFAULT_REF}"; fi
          echo "default_base=${DEFAULT_BASE}" >> "$GITHUB_OUTPUT"

      - name: Open PR (idempotent)
        if: steps.update.outputs.pushed == 'true'
        env:
          GH_TOKEN: ${{ secrets.CLASSIC }}
        run: |
          set -eu
          REPO="${{ github.repository }}"
          BASE="${{ steps.update.outputs.default_base }}"
          HEAD="${BRANCH_NAME}"

          EXISTING="$(gh pr list -R "$REPO" --head "$HEAD" --state open --json number --jq '.[0].number' || true)"
          if [ -n "$EXISTING" ]; then
            echo "PR #$EXISTING already open for $REPO:$HEAD -> $BASE"
            exit 0
          fi

          LABEL_ARGS=()
          for LABEL in ci metrics; do
            if gh label view "$LABEL" -R "$REPO" >/dev/null 2>&1 || \
               gh label create "$LABEL" -R "$REPO" --description "Infrastructure automation" >/dev/null 2>&1; then
              LABEL_ARGS+=("--label" "$LABEL")
            else
              echo "Warning: unable to ensure label '$LABEL' on $REPO, skipping" >&2
            fi
          done

          gh pr create -R "$REPO" \
            --head "$HEAD" \
            --base "$BASE" \
            --title "chore(metrics): refresh" \
            --body  "Auto-generated metrics update" \
            "${LABEL_ARGS[@]}"
