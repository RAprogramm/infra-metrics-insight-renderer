name: Render metrics for open-source repositories

on:
  workflow_dispatch:
    inputs:
      repositories:
        description: >-
          JSON array with repository names that should be refreshed.
          Defaults to ["masterror", "telegram-webapp-sdk"].
        required: false
        default: '["masterror", "telegram-webapp-sdk"]'
  workflow_call:
    inputs:
      repositories:
        description: >-
          JSON array with repository names that should be refreshed.
          Defaults to ["masterror", "telegram-webapp-sdk"].
        required: false
        type: string
        default: '["masterror", "telegram-webapp-sdk"]'
    secrets:
      CLASSIC:
        required: true

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      repositories: ${{ steps.resolve.outputs.repositories }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache metrics-orchestrator build
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "metrics-orchestrator -> target"

      - id: resolve
        name: Resolve repository list
        env:
          RAW_INPUT: ${{ inputs.repositories }}
        run: |
          set -euo pipefail
          RAW="${RAW_INPUT:-}"
          REPOSITORIES=$(cargo run --manifest-path metrics-orchestrator/Cargo.toml --quiet --locked -- open-source --input "${RAW}")
          printf 'repositories=%s\n' "${REPOSITORIES}" >> "${GITHUB_OUTPUT}"

  render:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        repository: ${{ fromJSON(needs.prepare.outputs.repositories) }}
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Render metrics for ${{ matrix.repository }}
        uses: ./.github/actions/render-repository
        with:
          classic_token: ${{ secrets.CLASSIC }}
          target_owner: RAprogramm
          target_repo: ${{ matrix.repository }}
          branch_name: ${{ format('ci/metrics-refresh-{0}', matrix.repository) }}
          target_path: ${{ format('metrics/{0}.svg', matrix.repository) }}
          temp_artifact: ${{ format('.metrics-tmp/{0}.svg', matrix.repository) }}
