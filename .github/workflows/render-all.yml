name: Render metrics for selected repos

on:
  schedule:
    - cron: "19 3 * * *"        # ежедневно, смещено от пиков
  workflow_dispatch:

jobs:
  render:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    strategy:
      fail-fast: false
      matrix:
        target:
          - { owner: "RAprogramm", repo: "masterror",           path: "docs/metrics.svg" }
          - { owner: "RAprogramm", repo: "telegram-webapp-sdk", path: "metrics.svg" }

    env:
      GH_USER: RAprogramm
      TZ: Asia/Ho_Chi_Minh
      BRANCH_NAME: ci/metrics-refresh

    steps:
      - name: Checkout renderer
        uses: actions/checkout@v4

      # 1) Генерим метрики в $GITHUB_WORKSPACE
      - name: Generate metrics SVG
        uses: lowlighter/metrics@latest
        with:
          token: ${{ secrets.METRICS_PAT }}     # fine-grained PAT с RW на целевые репо
          user: ${{ env.GH_USER }}
          template: classic
          filename: metrics.tmp.svg
          base: ""
          config_timezone: ${{ env.TZ }}
          cache: 12h
          plugin_isocalendar: yes
          plugin_isocalendar_duration: half-year
          plugin_languages: yes
          plugin_languages_limit: 8
          plugin_languages_sections: most-used
          plugin_languages_details: bytes-size, percentage
          plugin_languages_ignored: html, css, scss

      - name: Verify generated artifact
        run: |
          set -eu
          test -f "$GITHUB_WORKSPACE/metrics.tmp.svg"
          echo "Generated: $GITHUB_WORKSPACE/metrics.tmp.svg"

      # 2) Клоним цель, корректно создаём/обновляем tracking-ref и ветку, коммитим, пушим
      - name: Clone target repo, update branch and file
        id: update
        run: |
          set -eu

          REPO="${{ matrix.target.owner }}/${{ matrix.target.repo }}"
          URL="https://x-access-token:${{ secrets.METRICS_PAT }}@github.com/${REPO}.git"

          git clone --depth=1 "$URL" target-repo
          cd target-repo

          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config pull.rebase true

          # Определяем дефолтную ветку удалённого репозитория (origin/HEAD -> origin/main|master|…)
          DEFAULT_REF="$(git symbolic-ref --quiet --short refs/remotes/origin/HEAD | sed 's#^origin/##' || true)"
          if [ -z "${DEFAULT_REF}" ]; then DEFAULT_REF="main"; fi
          echo "default_base=${DEFAULT_REF}" >> "$GITHUB_OUTPUT"

          # Если удалённая ci-ветка существует — подтянуть её в remote-tracking ref и создать локальную на её основе.
          if git ls-remote --exit-code --heads origin "${BRANCH_NAME}" >/dev/null 2>&1; then
            git fetch --no-tags --prune --depth=1 origin \
              "+refs/heads/${BRANCH_NAME}:refs/remotes/origin/${BRANCH_NAME}"
            git checkout -B "${BRANCH_NAME}" "origin/${BRANCH_NAME}"
          else
            # Иначе создать локальную ветку от дефолтной базы
            git fetch --no-tags --prune --depth=1 origin \
              "+refs/heads/${DEFAULT_REF}:refs/remotes/origin/${DEFAULT_REF}"
            git checkout -B "${BRANCH_NAME}" "origin/${DEFAULT_REF}"
          fi

          # Обновляем файл
          mkdir -p "$(dirname "${{ matrix.target.path }}")"
          cp "$GITHUB_WORKSPACE/metrics.tmp.svg" "${{ matrix.target.path }}"

          if git status --porcelain | grep .; then
            git add "${{ matrix.target.path }}"
            git commit -m "chore(metrics): refresh ${{ matrix.target.path }}"
            # Служебная ветка — форсим с защитой, чтобы не плодить мердж-мусор
            git push --force-with-lease origin "${BRANCH_NAME}"
            echo "pushed=true" >> "$GITHUB_OUTPUT"
          else
            echo "No changes to commit."
            echo "pushed=false" >> "$GITHUB_OUTPUT"
          fi

      # 3) Создаём PR через gh CLI, без трогания ветки сторонними экшенами
      - name: Open PR (idempotent)
        if: steps.update.outputs.pushed == 'true'
        env:
          GH_TOKEN: ${{ secrets.METRICS_PAT }}
        run: |
          set -eu
          REPO="${{ matrix.target.owner }}/${{ matrix.target.repo }}"
          BASE="${{ steps.update.outputs.default_base }}"
          HEAD="${BRANCH_NAME}"

          # Если PR уже открыт от этой ветки — ничего не делаем
          EXISTING="$(gh pr list -R "$REPO" --head "$HEAD" --state open --json number --jq '.[0].number' || true)"
          if [ -n "$EXISTING" ]; then
            echo "PR #$EXISTING already open for $REPO:$HEAD -> $BASE"
            exit 0
          fi

          gh pr create -R "$REPO" \
            --head "$HEAD" \
            --base "$BASE" \
            --title "chore(metrics): refresh" \
            --body  "Auto-generated metrics update" \
            --label "ci" --label "metrics"
