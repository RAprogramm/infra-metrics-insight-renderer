# SPDX-FileCopyrightText: 2025 RAprogramm <andrey.rozanov.vl@gmail.com>
#
# SPDX-License-Identifier: MIT

name: Badge sync

on:
  workflow_dispatch:
  schedule:
    - cron: '0 4 * * *'
  push:
    branches:
      - main
    paths:
      - README.md
      - targets/targets.yaml
  pull_request:
    paths:
      - README.md
      - targets/targets.yaml

permissions:
  contents: read
  pull-requests: read

jobs:
  sync:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      TARGETS_CONFIG: targets/targets.yaml
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup IMIR
        uses: ./.github/actions/setup-imir
        with:
          token: ${{ secrets.CLASSIC || github.token }}

      - name: Normalize targets document
        id: targets
        run: |
          set -euo pipefail

          imir --config "${TARGETS_CONFIG}" > targets.json

          echo "path=targets.json" >> "$GITHUB_OUTPUT"

      - name: Detect impacted badge slugs
        id: slugs
        run: |
          set -euo pipefail

          BASE_REF=""
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_REF="${{ github.event.pull_request.base.sha }}"
          elif [ "${{ github.event_name }}" = "push" ]; then
            BASE_REF="${{ github.event.before }}"
          fi

          RESULT=$(imir slugs \
            --base-ref "${BASE_REF}" \
            --head-ref "${{ github.sha }}" \
            --files README.md targets/targets.yaml \
            --config "${TARGETS_CONFIG}" \
            --event "${{ github.event_name }}")

          echo "slugs=$(echo "${RESULT}" | jq -c '.slugs')" >> "$GITHUB_OUTPUT"
          echo "has=$(echo "${RESULT}" | jq -r '.has_any')" >> "$GITHUB_OUTPUT"

      - name: Generate badge assets
        if: steps.slugs.outputs.has == 'true'
        env:
          SLUGS_JSON: ${{ steps.slugs.outputs.slugs }}
        run: |
          set -euo pipefail

          printf '%s' "${SLUGS_JSON}" | jq -r '.[]' | while read -r SLUG; do
            if [ -z "${SLUG}" ]; then
              continue
            fi

            echo "Rendering badge for ${SLUG}" >&2
            imir badge generate --config "${TARGETS_CONFIG}" --target "${SLUG}" --output metrics
          done

      - name: Commit badge updates
        id: commit
        if: steps.slugs.outputs.has == 'true' && github.event_name != 'pull_request'
        run: |
          set -euo pipefail

          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          git add metrics

          if git diff --cached --quiet; then
            echo "No badge changes to commit."
            exit 0
          fi

          git commit -m "chore(badges): refresh"
          git push origin HEAD:main

