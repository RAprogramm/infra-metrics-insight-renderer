name: Render repository metrics

description: >-
  Render metrics for a repository using lowlighter/metrics and open or update a PR
  with the refreshed artifact.

author: RAprogramm Infrastructure Automation

inputs:
  classic_token:
    description: Personal access token used for pushing commits and opening PRs.
    required: true
  target_owner:
    description: Account that owns the repository to render metrics for.
    required: false
    default: ''
  target_repo:
    description: Repository name to render metrics for.
    required: true
  branch_name:
    description: Branch name used for commits with refreshed metrics.
    required: false
    default: ''
  contributors_branch:
    description: Branch analyzed by the contributors plugin.
    required: false
    default: ''
  target_path:
    description: Destination path for the generated metrics artifact relative to the repo root.
    required: false
    default: ''
  temp_artifact:
    description: Temporary artifact filename produced by the metrics renderer.
    required: false
    default: ''
  time_zone:
    description: Time zone string passed to metrics renderer.
    required: false
    default: Asia/Ho_Chi_Minh

runs:
  using: composite
  steps:
    - name: Configure execution context
      shell: bash
      run: |
        set -euo pipefail

        TARGET_REPO="${{ inputs.target_repo }}"
        if [ -z "${TARGET_REPO}" ]; then
          echo "The target_repo input must be provided." >&2
          exit 1
        fi

        TARGET_OWNER_INPUT="${{ inputs.target_owner }}"
        if [ -n "${TARGET_OWNER_INPUT}" ]; then
          TARGET_OWNER="${TARGET_OWNER_INPUT}"
        else
          TARGET_OWNER="${GITHUB_REPOSITORY%%/*}"
        fi

        TARGET_PATH_INPUT="${{ inputs.target_path }}"
        if [ -n "${TARGET_PATH_INPUT}" ]; then
          TARGET_PATH="${TARGET_PATH_INPUT}"
        else
          TARGET_PATH="metrics/${TARGET_REPO}.svg"
        fi

        TEMP_ARTIFACT_INPUT="${{ inputs.temp_artifact }}"
        if [ -n "${TEMP_ARTIFACT_INPUT}" ]; then
          TEMP_ARTIFACT="${TEMP_ARTIFACT_INPUT}"
        else
          TEMP_ARTIFACT=".metrics-tmp/${TARGET_REPO}.svg"
        fi

        BRANCH_NAME_INPUT="${{ inputs.branch_name }}"
        if [ -n "${BRANCH_NAME_INPUT}" ]; then
          BRANCH_NAME="${BRANCH_NAME_INPUT}"
        else
          BRANCH_NAME="ci/metrics-refresh-${TARGET_REPO}"
        fi

        CONTRIBUTORS_BRANCH_INPUT="${{ inputs.contributors_branch }}"
        if [ -n "${CONTRIBUTORS_BRANCH_INPUT}" ]; then
          CONTRIBUTORS_BRANCH="$(printf '%s' "${CONTRIBUTORS_BRANCH_INPUT}" | xargs)"
        else
          CONTRIBUTORS_BRANCH="main"
        fi

        if [ -z "${CONTRIBUTORS_BRANCH}" ]; then
          echo "The contributors_branch input cannot be empty." >&2
          exit 1
        fi

        case "${CONTRIBUTORS_BRANCH}" in
          *[[:space:]]*)
            echo "The contributors_branch input cannot contain whitespace." >&2
            exit 1
            ;;
        esac

        TIME_ZONE_INPUT="${{ inputs.time_zone }}"
        if [ -n "${TIME_ZONE_INPUT}" ]; then
          TIME_ZONE="${TIME_ZONE_INPUT}"
        else
          TIME_ZONE="Asia/Ho_Chi_Minh"
        fi

        echo "TARGET_OWNER=${TARGET_OWNER}" >> "${GITHUB_ENV}"
        echo "TARGET_REPO=${TARGET_REPO}" >> "${GITHUB_ENV}"
        echo "TARGET_PATH=${TARGET_PATH}" >> "${GITHUB_ENV}"
        echo "TEMP_ARTIFACT=${TEMP_ARTIFACT}" >> "${GITHUB_ENV}"
        echo "BRANCH_NAME=${BRANCH_NAME}" >> "${GITHUB_ENV}"
        echo "CONTRIBUTORS_BRANCH=${CONTRIBUTORS_BRANCH}" >> "${GITHUB_ENV}"
        echo "TIME_ZONE=${TIME_ZONE}" >> "${GITHUB_ENV}"

    - name: Checkout renderer
      uses: actions/checkout@v5

    - name: Prepare temporary artifact path
      shell: bash
      run: |
        set -euo pipefail
        mkdir -p "$(dirname "${TEMP_ARTIFACT}")"

    - name: Prepare metrics docker image
      shell: bash
      run: |
        set -euo pipefail
        "${GITHUB_WORKSPACE}/scripts/prepare-metrics-image.sh" --token "${{ inputs.classic_token }}"

    - name: Metrics embed
      uses: lowlighter/metrics@latest
      with:
        use_prebuilt_image: yes
        token: ${{ inputs.classic_token }}
        user: ${{ env.TARGET_OWNER }}
        repo: ${{ env.TARGET_REPO }}
        template: repository
        filename: ${{ env.TEMP_ARTIFACT }}
        base: "header, activity, community, metadata"
        config_timezone: ${{ env.TIME_ZONE }}
        plugin_languages: yes
        plugin_languages_limit: 8
        plugin_languages_sections: most-used
        plugin_languages_colors: github
        plugin_languages_details: percentage
        plugin_languages_threshold: 0%
        plugin_lines: yes
        plugin_followup: yes
        plugin_followup_sections: repositories, user
        plugin_projects: no
        plugin_licenses: yes
        plugin_traffic: yes
        plugin_contributors: yes
        plugin_contributors_head: ${{ env.CONTRIBUTORS_BRANCH }}
        plugin_contributors_base: ${{ env.CONTRIBUTORS_BRANCH }}

    - name: Locate generated artifact
      id: artifact
      shell: bash
      run: |
        set -euo pipefail

        RESULT=$(imir artifact \
          --temp-artifact "${TEMP_ARTIFACT}" \
          --workspace "${GITHUB_WORKSPACE}")

        ARTIFACT_PATH=$(echo "${RESULT}" | jq -r '.path')
        echo "path=${ARTIFACT_PATH}" >> "$GITHUB_OUTPUT"

    - name: Move artifact into repository workspace
      shell: bash
      run: |
        set -euo pipefail

        imir file move \
          --source "${{ steps.artifact.outputs.path }}" \
          --destination "${TARGET_PATH}"

    - name: Commit metrics update
      id: update
      shell: bash
      run: |
        set -euo pipefail

        RESULT=$(imir git commit-push \
          --branch "${BRANCH_NAME}" \
          --path "${TARGET_PATH}" \
          --message "chore(metrics): refresh ${TARGET_REPO}")

        echo "pushed=$(echo "${RESULT}" | jq -r '.pushed')" >> "$GITHUB_OUTPUT"
        echo "default_base=$(echo "${RESULT}" | jq -r '.default_base')" >> "$GITHUB_OUTPUT"

    - name: Open PR (idempotent)
      if: steps.update.outputs.pushed == 'true'
      env:
        GH_TOKEN: ${{ inputs.classic_token }}
      shell: bash
      run: |
        set -euo pipefail
        REPO="${GITHUB_REPOSITORY}"
        BASE="${{ steps.update.outputs.default_base }}"
        HEAD="${BRANCH_NAME}"

        EXISTING="$(gh pr list -R "${REPO}" --head "${HEAD}" --state open --json number --jq '.[0].number' || true)"
        if [ -n "${EXISTING}" ]; then
          echo "PR #${EXISTING} already open for ${REPO}:${HEAD} -> ${BASE}"
          exit 0
        fi

        LABEL_ARGS=()
        for LABEL in ci metrics; do
          if gh label view "${LABEL}" -R "${REPO}" >/dev/null 2>&1 || \
             gh label create "${LABEL}" -R "${REPO}" --description "Infrastructure automation" >/dev/null 2>&1; then
            LABEL_ARGS+=("--label" "${LABEL}")
          else
            echo "Warning: unable to ensure label '${LABEL}' on ${REPO}, skipping" >&2
          fi
        done

        gh pr create -R "${REPO}" \
          --head "${HEAD}" \
          --base "${BASE}" \
          --title "chore(metrics): refresh" \
          --body  "Auto-generated metrics update" \
          "${LABEL_ARGS[@]}"
