# SPDX-FileCopyrightText: 2025 RAprogramm <andrey.rozanov.vl@gmail.com>
#
# SPDX-License-Identifier: MIT

name: Render repository metrics

description: >-
  Render metrics for a repository using lowlighter/metrics and commit
  directly to main branch.

author: RAprogramm Infrastructure Automation

inputs:
  classic_token:
    description: Personal access token used for rendering metrics.
    required: true
  target_owner:
    description: Account that owns the repository to render metrics for.
    required: false
    default: ''
  target_repo:
    description: Repository name to render metrics for.
    required: true
  contributors_branch:
    description: Branch analyzed by the contributors plugin.
    required: false
    default: ''
  target_path:
    description: Destination path for the generated metrics artifact relative to the repo root.
    required: false
    default: ''
  temp_artifact:
    description: Temporary artifact filename produced by the metrics renderer.
    required: false
    default: ''
  time_zone:
    description: Time zone string passed to metrics renderer.
    required: false
    default: Asia/Ho_Chi_Minh

runs:
  using: composite
  steps:
    - name: Setup IMIR CLI
      uses: ./.github/actions/setup-imir
      with:
        token: ${{ inputs.classic_token }}

    - name: Configure execution context
      shell: bash
      run: |
        set -euo pipefail

        INPUTS=$("${HOME}/.local/bin/imir" render normalize-repository \
          --target-repo "${{ inputs.target_repo }}" \
          --github-repo "${GITHUB_REPOSITORY}" \
          ${{ inputs.target_owner && format('--target-owner "{0}"', inputs.target_owner) || '' }} \
          ${{ inputs.target_path && format('--target-path "{0}"', inputs.target_path) || '' }} \
          ${{ inputs.temp_artifact && format('--temp-artifact "{0}"', inputs.temp_artifact) || '' }} \
          ${{ inputs.contributors_branch && format('--contributors-branch "{0}"', inputs.contributors_branch) || '' }} \
          ${{ inputs.time_zone && format('--time-zone "{0}"', inputs.time_zone) || '' }})

        echo "TARGET_OWNER=$(echo "${INPUTS}" | jq -r '.target_owner')" >> "${GITHUB_ENV}"
        echo "TARGET_REPO=$(echo "${INPUTS}" | jq -r '.target_repo')" >> "${GITHUB_ENV}"
        echo "TARGET_PATH=$(echo "${INPUTS}" | jq -r '.target_path')" >> "${GITHUB_ENV}"
        echo "TEMP_ARTIFACT=$(echo "${INPUTS}" | jq -r '.temp_artifact')" >> "${GITHUB_ENV}"
        echo "CONTRIBUTORS_BRANCH=$(echo "${INPUTS}" | jq -r '.contributors_branch')" >> "${GITHUB_ENV}"
        echo "TIME_ZONE=$(echo "${INPUTS}" | jq -r '.time_zone')" >> "${GITHUB_ENV}"

    - name: Checkout renderer
      uses: actions/checkout@v5

    - name: Prepare temporary artifact path
      shell: bash
      run: |
        set -euo pipefail
        mkdir -p "$(dirname "${TEMP_ARTIFACT}")"

    - name: Prepare metrics docker image
      shell: bash
      run: |
        set -euo pipefail
        "${GITHUB_WORKSPACE}/scripts/prepare-metrics-image.sh" --token "${{ inputs.classic_token }}"

    - name: Metrics embed
      uses: lowlighter/metrics@latest
      with:
        use_prebuilt_image: yes
        token: ${{ inputs.classic_token }}
        user: ${{ env.TARGET_OWNER }}
        repo: ${{ env.TARGET_REPO }}
        template: repository
        filename: ${{ env.TEMP_ARTIFACT }}
        base: "header, activity, community, metadata"
        config_timezone: ${{ env.TIME_ZONE }}
        plugin_languages: yes
        plugin_languages_limit: 8
        plugin_languages_sections: most-used
        plugin_languages_colors: github
        plugin_languages_details: percentage
        plugin_languages_threshold: 0%
        plugin_lines: yes
        plugin_followup: yes
        plugin_followup_sections: repositories, user
        plugin_projects: no
        plugin_licenses: yes
        plugin_traffic: yes
        plugin_contributors: yes
        plugin_contributors_head: ${{ env.CONTRIBUTORS_BRANCH }}
        plugin_contributors_base: ${{ env.CONTRIBUTORS_BRANCH }}

    - name: Locate generated artifact
      id: artifact
      shell: bash
      run: |
        set -euo pipefail

        RESULT=$("${HOME}/.local/bin/imir" artifact \
          --temp-artifact "${TEMP_ARTIFACT}" \
          --workspace "${GITHUB_WORKSPACE}")

        ARTIFACT_PATH=$(echo "${RESULT}" | jq -r '.path')
        echo "path=${ARTIFACT_PATH}" >> "$GITHUB_OUTPUT"

    - name: Move artifact into repository workspace
      shell: bash
      run: |
        set -euo pipefail

        "${HOME}/.local/bin/imir" file move \
          --source "${{ steps.artifact.outputs.path }}" \
          --destination "${TARGET_PATH}"

    - name: Commit metrics update
      shell: bash
      run: |
        set -euo pipefail

        "${HOME}/.local/bin/imir" git commit-push \
          --branch "main" \
          --path "${TARGET_PATH}" \
          --message "chore(metrics): update ${TARGET_REPO} [Skip GitHub Action]"
