name: Render profile metrics

description: >-
  Render metrics for a GitHub profile using lowlighter/metrics and publish the
  refreshed artifact via pull request.

author: RAprogramm Infrastructure Automation

inputs:
  classic_token:
    description: Personal access token used for rendering and publishing metrics.
    required: true
  target_user:
    description: GitHub user or organization whose profile should be rendered.
    required: true
  branch_name:
    description: Branch used for commits with refreshed metrics.
    required: false
    default: ''
  target_path:
    description: Destination path for the generated metrics artifact.
    required: false
    default: ''
  temp_artifact:
    description: Temporary artifact filename produced by the metrics renderer.
    required: false
    default: ''
  time_zone:
    description: Time zone string passed to the metrics renderer.
    required: false
    default: ''
  display_name:
    description: Human readable label used in commit messages.
    required: false
    default: ''
  include_private:
    description: Toggle inclusion of private repositories and secret achievements.
    required: false
    default: 'false'

runs:
  using: composite
  steps:
    - name: Configure execution context
      shell: bash
      run: |
        set -euo pipefail

        TARGET_USER_INPUT="${{ inputs.target_user }}"
        if [ -z "${TARGET_USER_INPUT}" ]; then
          echo "The target_user input must be provided." >&2
          exit 1
        fi

        BRANCH_NAME_INPUT="${{ inputs.branch_name }}"
        if [ -n "${BRANCH_NAME_INPUT}" ]; then
          BRANCH_NAME="${BRANCH_NAME_INPUT}"
        else
          BRANCH_NAME="ci/metrics-refresh-profile"
        fi

        TARGET_PATH_INPUT="${{ inputs.target_path }}"
        if [ -n "${TARGET_PATH_INPUT}" ]; then
          TARGET_PATH="${TARGET_PATH_INPUT}"
        else
          TARGET_PATH="metrics/profile.svg"
        fi

        TEMP_ARTIFACT_INPUT="${{ inputs.temp_artifact }}"
        if [ -n "${TEMP_ARTIFACT_INPUT}" ]; then
          TEMP_ARTIFACT="${TEMP_ARTIFACT_INPUT}"
        else
          TEMP_ARTIFACT=".metrics-tmp/profile.svg"
        fi

        TIME_ZONE_INPUT="${{ inputs.time_zone }}"
        if [ -n "${TIME_ZONE_INPUT}" ]; then
          TIME_ZONE="${TIME_ZONE_INPUT}"
        else
          TIME_ZONE="Asia/Ho_Chi_Minh"
        fi

        DISPLAY_NAME_INPUT="${{ inputs.display_name }}"
        if [ -n "${DISPLAY_NAME_INPUT}" ]; then
          DISPLAY_NAME="${DISPLAY_NAME_INPUT}"
        else
          DISPLAY_NAME="profile"
        fi

        INCLUDE_PRIVATE_INPUT="${{ inputs.include_private }}"
        INCLUDE_PRIVATE_NORMALIZED="$(printf '%s' "${INCLUDE_PRIVATE_INPUT}" | tr '[:upper:]' '[:lower:]')"
        case "${INCLUDE_PRIVATE_NORMALIZED}" in
          ""|"false"|"0"|"no")
            INCLUDE_PRIVATE="false"
            REPOSITORIES_AFFILIATIONS="owner, organization_member"
            PLUGIN_REPOSITORIES_AFFILIATIONS="owner, organization_member"
            PLUGIN_ACTIVITY_VISIBILITY="public"
            PLUGIN_CODE_VISIBILITY="public"
            PLUGIN_ACHIEVEMENTS_SECRETS="no"
            ;;
          "true"|"1"|"yes")
            INCLUDE_PRIVATE="true"
            REPOSITORIES_AFFILIATIONS="owner, collaborator, organization_member"
            PLUGIN_REPOSITORIES_AFFILIATIONS="owner, collaborator, organization_member"
            PLUGIN_ACTIVITY_VISIBILITY="all"
            PLUGIN_CODE_VISIBILITY="all"
            PLUGIN_ACHIEVEMENTS_SECRETS="yes"
            ;;
          *)
            echo "The include_private input must be a boolean value." >&2
            exit 1
            ;;
        esac

        echo "TARGET_USER=${TARGET_USER_INPUT}" >> "${GITHUB_ENV}"
        echo "BRANCH_NAME=${BRANCH_NAME}" >> "${GITHUB_ENV}"
        echo "TARGET_PATH=${TARGET_PATH}" >> "${GITHUB_ENV}"
        echo "TEMP_ARTIFACT=${TEMP_ARTIFACT}" >> "${GITHUB_ENV}"
        echo "TIME_ZONE=${TIME_ZONE}" >> "${GITHUB_ENV}"
        echo "DISPLAY_NAME=${DISPLAY_NAME}" >> "${GITHUB_ENV}"
        echo "INCLUDE_PRIVATE=${INCLUDE_PRIVATE}" >> "${GITHUB_ENV}"
        echo "REPOSITORIES_AFFILIATIONS=${REPOSITORIES_AFFILIATIONS}" >> "${GITHUB_ENV}"
        echo "PLUGIN_REPOSITORIES_AFFILIATIONS=${PLUGIN_REPOSITORIES_AFFILIATIONS}" >> "${GITHUB_ENV}"
        echo "PLUGIN_ACTIVITY_VISIBILITY=${PLUGIN_ACTIVITY_VISIBILITY}" >> "${GITHUB_ENV}"
        echo "PLUGIN_CODE_VISIBILITY=${PLUGIN_CODE_VISIBILITY}" >> "${GITHUB_ENV}"
        echo "PLUGIN_ACHIEVEMENTS_SECRETS=${PLUGIN_ACHIEVEMENTS_SECRETS}" >> "${GITHUB_ENV}"

    - name: Checkout renderer
      uses: actions/checkout@v5

    - name: Prepare temporary artifact path
      shell: bash
      run: |
        set -euo pipefail
        mkdir -p "$(dirname "${TEMP_ARTIFACT}")"

    - name: Prepare metrics docker image
      shell: bash
      run: |
        set -euo pipefail
        "${GITHUB_WORKSPACE}/scripts/prepare-metrics-image.sh" --token "${{ inputs.classic_token }}"

    - name: Metrics embed
      uses: lowlighter/metrics@latest
      with:
        use_prebuilt_image: yes
        token: ${{ inputs.classic_token }}
        user: ${{ env.TARGET_USER }}
        template: classic
        filename: ${{ env.TEMP_ARTIFACT }}
        base: "header, activity, community, repositories, metadata"
        base_hireable: yes
        base_indepth: yes
        base_skip: yes
        config_display: columns
        config_octicon: yes
        config_timezone: ${{ env.TIME_ZONE }}
        config_twemoji: yes
        repositories_affiliations: ${{ env.REPOSITORIES_AFFILIATIONS }}
        plugin_achievements: yes
        plugin_achievements_display: detailed
        plugin_achievements_secrets: ${{ env.PLUGIN_ACHIEVEMENTS_SECRETS }}
        plugin_achievements_threshold: A
        plugin_activity: yes
        plugin_activity_days: 14
        plugin_activity_filter: all
        plugin_activity_limit: 5
        plugin_activity_load: 300
        plugin_activity_timestamps: yes
        plugin_activity_visibility: ${{ env.PLUGIN_ACTIVITY_VISIBILITY }}
        plugin_calendar: yes
        plugin_calendar_limit: 1
        plugin_code: yes
        plugin_code_days: 3
        plugin_code_lines: 12
        plugin_code_load: 400
        plugin_code_visibility: ${{ env.PLUGIN_CODE_VISIBILITY }}
        plugin_discussions: yes
        plugin_discussions_categories: yes
        plugin_followup: yes
        plugin_followup_archived: yes
        plugin_followup_indepth: yes
        plugin_followup_sections: "repositories, user"
        plugin_gists: yes
        plugin_habits: yes
        plugin_habits_charts: yes
        plugin_habits_charts_type: classic
        plugin_habits_days: 14
        plugin_habits_facts: yes
        plugin_habits_from: 200
        plugin_habits_languages_limit: 8
        plugin_habits_languages_threshold: "0%"
        plugin_habits_trim: yes
        plugin_introduction: yes
        plugin_introduction_title: yes
        plugin_isocalendar: yes
        plugin_isocalendar_duration: full-year
        plugin_languages: yes
        plugin_languages_analysis_timeout: 15
        plugin_languages_analysis_timeout_repositories: 7.5
        plugin_languages_categories: markup, programming
        plugin_languages_colors: github
        plugin_languages_details: bytes-size, percentage
        plugin_languages_indepth: yes
        plugin_languages_recent_categories: data, markup, programming, prose
        plugin_languages_recent_days: 14
        plugin_languages_recent_load: 300
        plugin_languages_sections: "most-used, recently-used"
        plugin_languages_threshold: "100%"
        plugin_lines: yes
        plugin_lines_history_limit: 1
        plugin_lines_repositories_limit: 4
        plugin_lines_sections: "base, repositories, history"
        plugin_notable: yes
        plugin_notable_from: organization
        plugin_notable_indepth: yes
        plugin_notable_repositories: yes
        plugin_notable_self: yes
        plugin_notable_types: commit
        plugin_pagespeed: yes
        plugin_pagespeed_detailed: yes
        plugin_pagespeed_pwa: yes
        plugin_pagespeed_screenshot: yes
        plugin_pagespeed_url: .user.website
        plugin_people: yes
        plugin_people_limit: 24
        plugin_people_size: 28
        plugin_people_types: "followers, following, sponsoring, sponsors"
        plugin_projects: yes
        plugin_projects_limit: 4
        plugin_reactions: yes
        plugin_reactions_display: absolute
        plugin_reactions_limit: 200
        plugin_reactions_limit_discussions: 100
        plugin_reactions_limit_discussions_comments: 100
        plugin_reactions_limit_issues: 100
        plugin_repositories: yes
        plugin_repositories_featured: "RustManifest,masterror, telegram-webapp-sdk"
        plugin_repositories_order: "featured, pinned, starred, random"
        plugin_repositories_affiliations: ${{ env.PLUGIN_REPOSITORIES_AFFILIATIONS }}
        plugin_skyline: yes
        plugin_skyline_compatibility: yes
        plugin_skyline_frames: 60
        plugin_skyline_quality: 0.5
        plugin_skyline_settings: |
          {
            "url": "https://skyline.github.com/${login}/${year}",
            "ready": "[...document.querySelectorAll('span')].map(span => span.innerText).includes('Share on Twitter')",
            "wait": 1,
            "hide": "button, footer, a"
          }
        plugin_skyline_year: 2025
        plugin_sponsors: yes
        plugin_sponsors_past: yes
        plugin_sponsors_sections: "goal, list, about"
        plugin_sponsors_size: 24
        plugin_sponsors_title: "Sponsor Me!"
        plugin_stargazers: yes
        plugin_stargazers_charts: yes
        plugin_stargazers_charts_type: classic
        plugin_stargazers_days: 14
        plugin_stargazers_worldmap: yes
        plugin_stars: yes
        plugin_stars_limit: 4
        plugin_support: yes
        plugin_traffic: yes
        plugin_wakatime: yes
        plugin_wakatime_days: 7
        plugin_wakatime_limit: 5
        plugin_wakatime_repositories_visibility: all
        plugin_wakatime_sections: "time, projects, projects-graphs, languages, languages-graphs, editors, os"
        plugin_wakatime_url: https://wakatime.com
        plugin_wakatime_user: "@RA"
        repositories_forks: yes

    - name: Locate generated artifact
      id: artifact
      shell: bash
      run: |
        set -euo pipefail

        RESULT=$(imir artifact \
          --temp-artifact "${TEMP_ARTIFACT}" \
          --workspace "${GITHUB_WORKSPACE}")

        ARTIFACT_PATH=$(echo "${RESULT}" | jq -r '.path')
        echo "path=${ARTIFACT_PATH}" >> "$GITHUB_OUTPUT"

    - name: Move artifact into repository workspace
      shell: bash
      run: |
        set -euo pipefail

        imir file move \
          --source "${{ steps.artifact.outputs.path }}" \
          --destination "${TARGET_PATH}"

    - name: Commit metrics update
      id: update
      shell: bash
      run: |
        set -euo pipefail

        RESULT=$(imir git commit-push \
          --branch "${BRANCH_NAME}" \
          --path "${TARGET_PATH}" \
          --message "chore(metrics): refresh ${DISPLAY_NAME}")

        echo "pushed=$(echo "${RESULT}" | jq -r '.pushed')" >> "$GITHUB_OUTPUT"
        echo "default_base=$(echo "${RESULT}" | jq -r '.default_base')" >> "$GITHUB_OUTPUT"

    - name: Open PR (idempotent)
      if: steps.update.outputs.pushed == 'true'
      env:
        GH_TOKEN: ${{ inputs.classic_token }}
      shell: bash
      run: |
        set -euo pipefail
        REPO="${GITHUB_REPOSITORY}"
        BASE="${{ steps.update.outputs.default_base }}"
        HEAD="${BRANCH_NAME}"

        EXISTING="$(gh pr list -R "${REPO}" --head "${HEAD}" --state open --json number --jq '.[0].number' || true)"
        if [ -n "${EXISTING}" ]; then
          echo "PR #${EXISTING} already open for ${REPO}:${HEAD} -> ${BASE}"
          exit 0
        fi

        LABEL_ARGS=()
        for LABEL in ci metrics; do
          if gh label view "${LABEL}" -R "${REPO}" >/dev/null 2>&1 || \
             gh label create "${LABEL}" -R "${REPO}" --description "Infrastructure automation" >/dev/null 2>&1; then
            LABEL_ARGS+=("--label" "${LABEL}")
          else
            echo "Warning: unable to ensure label '${LABEL}' on ${REPO}, skipping" >&2
          fi
        done

        gh pr create -R "${REPO}" \
          --head "${HEAD}" \
          --base "${BASE}" \
          --title "chore(metrics): refresh" \
          --body  "Auto-generated metrics update" \
          "${LABEL_ARGS[@]}"
