# SPDX-FileCopyrightText: 2025 RAprogramm <andrey.rozanov.vl@gmail.com>
#
# SPDX-License-Identifier: MIT

name: Render profile metrics

description: >-
  Render metrics for a GitHub profile using lowlighter/metrics and publish the
  refreshed artifact via pull request.

author: RAprogramm Infrastructure Automation

inputs:
  classic_token:
    description: Personal access token used for rendering and publishing metrics.
    required: true
  target_user:
    description: GitHub user or organization whose profile should be rendered.
    required: true
  branch_name:
    description: Branch used for commits with refreshed metrics.
    required: false
    default: ''
  target_path:
    description: Destination path for the generated metrics artifact.
    required: false
    default: ''
  temp_artifact:
    description: Temporary artifact filename produced by the metrics renderer.
    required: false
    default: ''
  time_zone:
    description: Time zone string passed to the metrics renderer.
    required: false
    default: ''
  display_name:
    description: Human readable label used in commit messages.
    required: false
    default: ''
  include_private:
    description: Toggle inclusion of private repositories and secret achievements.
    required: false
    default: 'false'

runs:
  using: composite
  steps:
    - name: Setup IMIR CLI
      uses: ./.github/actions/setup-imir
      with:
        token: ${{ inputs.classic_token }}

    - name: Configure execution context
      shell: bash
      run: |
        set -euo pipefail

        echo "DEBUG: HOME is ${HOME}"
        echo "DEBUG: Checking if imir exists at ${HOME}/.local/bin/imir"
        ls -la "${HOME}/.local/bin/imir" || echo "imir not found!"

        INPUTS=$("${HOME}/.local/bin/imir" render normalize-profile \
          --target-user "${{ inputs.target_user }}" \
          ${{ inputs.branch_name && format('--branch-name "{0}"', inputs.branch_name) || '' }} \
          ${{ inputs.target_path && format('--target-path "{0}"', inputs.target_path) || '' }} \
          ${{ inputs.temp_artifact && format('--temp-artifact "{0}"', inputs.temp_artifact) || '' }} \
          ${{ inputs.time_zone && format('--time-zone "{0}"', inputs.time_zone) || '' }} \
          ${{ inputs.display_name && format('--display-name "{0}"', inputs.display_name) || '' }} \
          ${{ inputs.include_private && format('--include-private "{0}"', inputs.include_private) || '' }})

        echo "TARGET_USER=$(echo "${INPUTS}" | jq -r '.target_user')" >> "${GITHUB_ENV}"
        echo "BRANCH_NAME=$(echo "${INPUTS}" | jq -r '.branch_name')" >> "${GITHUB_ENV}"
        echo "TARGET_PATH=$(echo "${INPUTS}" | jq -r '.target_path')" >> "${GITHUB_ENV}"
        echo "TEMP_ARTIFACT=$(echo "${INPUTS}" | jq -r '.temp_artifact')" >> "${GITHUB_ENV}"
        echo "TIME_ZONE=$(echo "${INPUTS}" | jq -r '.time_zone')" >> "${GITHUB_ENV}"
        echo "DISPLAY_NAME=$(echo "${INPUTS}" | jq -r '.display_name')" >> "${GITHUB_ENV}"
        echo "INCLUDE_PRIVATE=$(echo "${INPUTS}" | jq -r '.include_private')" >> "${GITHUB_ENV}"
        echo "REPOSITORIES_AFFILIATIONS=$(echo "${INPUTS}" | jq -r '.repositories_affiliations')" >> "${GITHUB_ENV}"
        echo "PLUGIN_REPOSITORIES_AFFILIATIONS=$(echo "${INPUTS}" | jq -r '.plugin_repositories_affiliations')" >> "${GITHUB_ENV}"
        echo "PLUGIN_ACTIVITY_VISIBILITY=$(echo "${INPUTS}" | jq -r '.plugin_activity_visibility')" >> "${GITHUB_ENV}"
        echo "PLUGIN_CODE_VISIBILITY=$(echo "${INPUTS}" | jq -r '.plugin_code_visibility')" >> "${GITHUB_ENV}"
        echo "PLUGIN_ACHIEVEMENTS_SECRETS=$(echo "${INPUTS}" | jq -r '.plugin_achievements_secrets')" >> "${GITHUB_ENV}"

    - name: Checkout renderer
      uses: actions/checkout@v5

    - name: Prepare temporary artifact path
      shell: bash
      run: |
        set -euo pipefail
        mkdir -p "$(dirname "${TEMP_ARTIFACT}")"

    - name: Metrics embed
      uses: lowlighter/metrics@latest
      with:
        use_prebuilt_image: yes
        token: ${{ inputs.classic_token }}
        user: ${{ env.TARGET_USER }}
        template: classic
        filename: ${{ env.TEMP_ARTIFACT }}
        base: "header, activity, community, repositories, metadata"
        base_hireable: yes
        base_indepth: yes
        base_skip: yes
        config_display: columns
        config_octicon: yes
        config_timezone: ${{ env.TIME_ZONE }}
        config_twemoji: yes
        repositories_affiliations: ${{ env.REPOSITORIES_AFFILIATIONS }}
        plugin_achievements: yes
        plugin_achievements_display: detailed
        plugin_achievements_secrets: ${{ env.PLUGIN_ACHIEVEMENTS_SECRETS }}
        plugin_achievements_threshold: A
        plugin_activity: yes
        plugin_activity_days: 14
        plugin_activity_filter: all
        plugin_activity_limit: 5
        plugin_activity_load: 300
        plugin_activity_timestamps: yes
        plugin_activity_visibility: ${{ env.PLUGIN_ACTIVITY_VISIBILITY }}
        plugin_calendar: yes
        plugin_calendar_limit: 1
        plugin_code: yes
        plugin_code_days: 3
        plugin_code_lines: 12
        plugin_code_load: 400
        plugin_code_visibility: ${{ env.PLUGIN_CODE_VISIBILITY }}
        plugin_discussions: yes
        plugin_discussions_categories: yes
        plugin_followup: yes
        plugin_followup_archived: yes
        plugin_followup_indepth: yes
        plugin_followup_sections: "repositories, user"
        plugin_gists: yes
        plugin_habits: yes
        plugin_habits_charts: yes
        plugin_habits_charts_type: classic
        plugin_habits_days: 14
        plugin_habits_facts: yes
        plugin_habits_from: 200
        plugin_habits_languages_limit: 8
        plugin_habits_languages_threshold: "0%"
        plugin_habits_trim: yes
        plugin_introduction: yes
        plugin_introduction_title: yes
        plugin_isocalendar: yes
        plugin_isocalendar_duration: full-year
        plugin_languages: yes
        plugin_languages_analysis_timeout: 15
        plugin_languages_analysis_timeout_repositories: 7.5
        plugin_languages_categories: markup, programming
        plugin_languages_colors: github
        plugin_languages_details: bytes-size, percentage
        plugin_languages_indepth: yes
        plugin_languages_recent_categories: data, markup, programming, prose
        plugin_languages_recent_days: 14
        plugin_languages_recent_load: 300
        plugin_languages_sections: "most-used, recently-used"
        plugin_languages_threshold: "100%"
        plugin_lines: yes
        plugin_lines_history_limit: 1
        plugin_lines_repositories_limit: 4
        plugin_lines_sections: "base, repositories, history"
        plugin_notable: yes
        plugin_notable_from: organization
        plugin_notable_indepth: yes
        plugin_notable_repositories: yes
        plugin_notable_self: yes
        plugin_notable_types: commit
        plugin_pagespeed: yes
        plugin_pagespeed_detailed: yes
        plugin_pagespeed_pwa: yes
        plugin_pagespeed_screenshot: yes
        plugin_pagespeed_url: .user.website
        plugin_people: yes
        plugin_people_limit: 24
        plugin_people_size: 28
        plugin_people_types: "followers, following, sponsoring, sponsors"
        plugin_projects: yes
        plugin_projects_limit: 4
        plugin_reactions: yes
        plugin_reactions_display: absolute
        plugin_reactions_limit: 200
        plugin_reactions_limit_discussions: 100
        plugin_reactions_limit_discussions_comments: 100
        plugin_reactions_limit_issues: 100
        plugin_repositories: yes
        plugin_repositories_featured: "RustManifest,masterror, telegram-webapp-sdk"
        plugin_repositories_order: "featured, pinned, starred, random"
        plugin_repositories_affiliations: ${{ env.PLUGIN_REPOSITORIES_AFFILIATIONS }}
        plugin_skyline: yes
        plugin_skyline_compatibility: yes
        plugin_skyline_frames: 60
        plugin_skyline_quality: 0.5
        plugin_skyline_settings: |
          {
            "url": "https://skyline.github.com/${login}/${year}",
            "ready": "[...document.querySelectorAll('span')].map(span => span.innerText).includes('Share on Twitter')",
            "wait": 1,
            "hide": "button, footer, a"
          }
        plugin_skyline_year: 2025
        plugin_sponsors: yes
        plugin_sponsors_past: yes
        plugin_sponsors_sections: "goal, list, about"
        plugin_sponsors_size: 24
        plugin_sponsors_title: "Sponsor Me!"
        plugin_stargazers: yes
        plugin_stargazers_charts: yes
        plugin_stargazers_charts_type: classic
        plugin_stargazers_days: 14
        plugin_stargazers_worldmap: yes
        plugin_stars: yes
        plugin_stars_limit: 4
        plugin_support: yes
        plugin_traffic: yes
        plugin_wakatime: yes
        plugin_wakatime_days: 7
        plugin_wakatime_limit: 5
        plugin_wakatime_repositories_visibility: all
        plugin_wakatime_sections: "time, projects, projects-graphs, languages, languages-graphs, editors, os"
        plugin_wakatime_url: https://wakatime.com
        plugin_wakatime_user: "@RA"
        repositories_forks: yes

    - name: Locate generated artifact
      id: artifact
      shell: bash
      run: |
        set -euo pipefail

        RESULT=$("${HOME}/.local/bin/imir" artifact \
          --temp-artifact "${TEMP_ARTIFACT}" \
          --workspace "${GITHUB_WORKSPACE}")

        ARTIFACT_PATH=$(echo "${RESULT}" | jq -r '.path')
        echo "path=${ARTIFACT_PATH}" >> "$GITHUB_OUTPUT"

    - name: Move artifact into repository workspace
      shell: bash
      run: |
        set -euo pipefail

        "${HOME}/.local/bin/imir" file move \
          --source "${{ steps.artifact.outputs.path }}" \
          --destination "${TARGET_PATH}"

    - name: Commit metrics update
      id: update
      shell: bash
      run: |
        set -euo pipefail

        RESULT=$("${HOME}/.local/bin/imir" git commit-push \
          --branch "${BRANCH_NAME}" \
          --path "${TARGET_PATH}" \
          --message "chore(metrics): refresh ${DISPLAY_NAME}")

        echo "pushed=$(echo "${RESULT}" | jq -r '.pushed')" >> "$GITHUB_OUTPUT"
        echo "default_base=$(echo "${RESULT}" | jq -r '.default_base')" >> "$GITHUB_OUTPUT"

    - name: Open PR (idempotent)
      if: steps.update.outputs.pushed == 'true'
      shell: bash
      run: |
        set -euo pipefail

        "${HOME}/.local/bin/imir" gh pr-create \
          --repo "${GITHUB_REPOSITORY}" \
          --head "${BRANCH_NAME}" \
          --base "${{ steps.update.outputs.default_base }}" \
          --title "chore(metrics): refresh" \
          --body "Auto-generated metrics update" \
          --labels ci metrics \
          --token "${{ inputs.classic_token }}"
